"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortForwarderInstance = exports.PortForwarder = exports.SSHD_IMAGE = void 0;
const ssh_remote_port_forward_1 = require("ssh-remote-port-forward");
const generic_container_1 = require("../generic-container/generic-container");
const common_1 = require("../common");
const container_runtime_1 = require("../container-runtime");
const reaper_1 = require("../reaper/reaper");
exports.SSHD_IMAGE = process.env["SSHD_CONTAINER_IMAGE"] ?? "testcontainers/sshd:1.1.0";
class PortForwarder {
    sshConnection;
    container;
    constructor(sshConnection, container) {
        this.sshConnection = sshConnection;
        this.container = container;
    }
    async exposeHostPort(port) {
        common_1.log.info(`Exposing host port ${port}...`);
        await this.sshConnection.remoteForward("localhost", port);
        common_1.log.info(`Exposed host port ${port}`);
    }
    getNetworkId() {
        return this.container.getNetworkId(this.getNetworkName());
    }
    getIpAddress() {
        return this.container.getIpAddress(this.getNetworkName());
    }
    getNetworkName() {
        return this.container.getNetworkNames()[0];
    }
}
exports.PortForwarder = PortForwarder;
class PortForwarderInstance {
    static instance;
    static isRunning() {
        return this.instance !== undefined;
    }
    static async getInstance() {
        if (!this.instance) {
            this.instance = this.createInstance();
        }
        return this.instance;
    }
    static async createInstance() {
        common_1.log.debug(`Creating new Port Forwarder...`);
        const client = await (0, container_runtime_1.getContainerRuntimeClient)();
        const reaper = await (0, reaper_1.getReaper)(client);
        const username = "root";
        const password = new common_1.RandomUuid().nextUuid();
        const containerPort = process.env["TESTCONTAINERS_SSHD_PORT"]
            ? { container: 22, host: Number(process.env["TESTCONTAINERS_SSHD_PORT"]) }
            : 22;
        const container = await new generic_container_1.GenericContainer(exports.SSHD_IMAGE)
            .withName(`testcontainers-port-forwarder-${reaper.sessionId}`)
            .withExposedPorts(containerPort)
            .withEnvironment({ PASSWORD: password })
            .withCommand([
            "sh",
            "-c",
            `echo "${username}:$PASSWORD" | chpasswd && /usr/sbin/sshd -D -o PermitRootLogin=yes -o AddressFamily=inet -o GatewayPorts=yes -o AllowAgentForwarding=yes -o AllowTcpForwarding=yes -o KexAlgorithms=+diffie-hellman-group1-sha1 -o HostkeyAlgorithms=+ssh-rsa`,
        ])
            .start();
        const host = client.info.containerRuntime.host;
        const port = container.getMappedPort(22);
        common_1.log.debug(`Connecting to Port Forwarder on "${host}:${port}"...`);
        const connection = await (0, ssh_remote_port_forward_1.createSshConnection)({ host, port, username, password });
        common_1.log.debug(`Connected to Port Forwarder on "${host}:${port}"`);
        connection.unref();
        return new PortForwarder(connection, container);
    }
}
exports.PortForwarderInstance = PortForwarderInstance;
//# sourceMappingURL=port-forwarder.js.map